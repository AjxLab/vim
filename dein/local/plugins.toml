[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
:command PlugUpdate call dein#update()
:command PlugInstall call dein#install()
'''

## -----*----- Color Scheme -----*----- ##
[[plugins]]
repo='morhetz/gruvbox'
[[plugins]]
repo = 'whatyouhide/vim-gotham'
hook_add = '''
syntax enable
colorscheme gotham256
'''

## -----*----- NERDTree -----*----- ##
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
" space + dir -> sidebar
let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeWinSize = 30
let NERDTreeShowHidden=1
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
autocmd BufWritePre * :FixWhitespace
let g:NERDTreeMapOpenInTab='d'
map <Leader>dir :NERDTreeToggle<CR>
'''
[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
[[plugins]]
repo = 'ryanoasis/vim-devicons'

## -----*----- ariline -----*----- ##
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
let g:airline#extensions#term#enabled = 0
let g:airline#extensions#whitespace#enabled = 0
let g:airline_theme = 'dark'
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = '☰'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
'''
[[plugins]]
repo = 'vim-airline/vim-airline-themes'

## -----*----- コード補完 -----*----- ##
[[plugins]]
repo = 'sheerun/vim-polyglot'
[[plugins]]
repo = 'ervandew/supertab'
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
build = './install.sh nightly'
hook_add = '''
""Diagnosticsの、左横のアイコンの色設定
highlight CocErrorSign ctermfg=15 ctermbg=196
highlight CocWarningSign ctermfg=0 ctermbg=172
""以下ショートカット
"ノーマルモードで
"スペースclでCocList
nmap <silent> <space>cl :<C-u>CocList<cr>
"KでHover
nmap <silent> K :<C-u>call CocAction('doHover')<cr>
"TでDefinition
nmap <silent> T <Plug>(coc-definition)
"スペースrfでReferences
nmap <silent> <space>rf <Plug>(coc-references)
"スペースrnでRename
nmap <silent> <space>rn <Plug>(coc-rename)
"スペースfmtでFormat
nmap <silent> <space>fmt <Plug>(coc-format)
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = 'vim-devicons'
hook_add = '''
autocmd FileType denite call s:denite_my_settings()
	function! s:denite_my_settings() abort
	  nnoremap <silent><buffer><expr> <CR>
	  \ denite#do_map('do_action')
	  nnoremap <silent><buffer><expr> d
	  \ denite#do_map('do_action', 'delete')
	  nnoremap <silent><buffer><expr> p
	  \ denite#do_map('do_action', 'preview')
	  nnoremap <silent><buffer><expr> q
	  \ denite#do_map('quit')
	  nnoremap <silent><buffer><expr> i
	  \ denite#do_map('open_filter_buffer')
	  nnoremap <silent><buffer><expr> <Space>
	  \ denite#do_map('toggle_select').'j'
      nnoremap <silent> * :<C-u>DeniteCursorWord -buffer-name=search
      \ -auto-highlight -mode=normal line<CR>
	endfunction
nnoremap <Leader>dg :Denite grep<CR>
nnoremap <Leader>db :Denite buffer<CR>
'''

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
" 保存時のみ実行する
let g:ale_lint_on_text_changed = 0
" 表示に関する設定
let g:ale_sign_error = ''
let g:ale_sign_warning = ''
let g:airline#extensions#ale#open_lnum_symbol = '('
let g:airline#extensions#ale#close_lnum_symbol = ')'
let g:ale_echo_msg_format = '[%linter%]%code: %%s'
highlight link ALEErrorSign Tag
highlight link ALEWarningSign StorageClass
'''

[[plugins]]
repo ='lambdalisue/gina.vim'
hook_add = '''
call gina#custom#command#option('status', '--opener', 'vsplit')
call gina#custom#command#option('diff', '--opener', 'vsplit')
'''

[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
let g:user_emmet_settings = {
            \    'variables': {
            \      'lang': "ja"
            \    },
            \   'indentation': '  '
            \ }
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install'
hook_add = '''
" space + ff
nmap <silent> <space>ff :<C-u>FZF<cr>
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
" space + go -> exec
map <Leader>go :QuickRun<CR>
let g:quickrun_config={'*': {'split': ''}}
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" ga -> align
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'twitvim/twitvim'
hook_add = '''
:command Tpost PosttoTwitter
:command Tread FriendsTwitter
:command Tswitch SwitchLoginTwitter
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'

[[plugins]]
repo = 'kamykn/spelunker.vim'

[[plugins]]
repo = 'tpope/vim-markdown'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'kazukazuinaina/commentout.vim'

[[plugins]]
repo = 'vim-jp/autofmt'

[[plugins]]
repo = 'kazukazuinaina/Weather.vim'

[[plugins]]
repo = 'itchyny/calendar.vim'

[[plugins]]
repo = 'andymass/vim-matchup'
